const express = require('express');
const { Telegraf } = require('telegraf');
const path = require('path');
const fs = require('fs');
const { Sequelize, DataTypes, Op } = require('sequelize');
require('dotenv').config();

// Chemin de la base de donn√©es persistante
const DB_PATH = '/var/lib/tidash_database.sqlite';

// V√©rifier si le fichier de base de donn√©es existe, sinon le cr√©er
if (!fs.existsSync(DB_PATH)) {
  try {
    fs.writeFileSync(DB_PATH, '', { flag: 'wx' });
    console.log(`üìÅ Database file created at ${DB_PATH}`);
  } catch (err) {
    console.error(`Erreur lors de la cr√©ation du fichier de base de donn√©es: ${err.message}`);
  }
}

// Initialiser la base de donn√©es SQLite
const sequelize = new Sequelize({
  dialect: 'sqlite',
  storage: DB_PATH,
  logging: false // D√©sactiver les logs SQL pour la production
});

// D√©finition des mod√®les
const User = sequelize.define('User', {
  gameId: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true,
    primaryKey: true
  },
  gameUsername: {
    type: DataTypes.STRING,
    allowNull: false
  },
  telegramId: {
    type: DataTypes.STRING,
    allowNull: true
  },
  telegramUsername: {
    type: DataTypes.STRING,
    allowNull: true
  },
  paypalEmail: {
    type: DataTypes.STRING,
    allowNull: true
  },
  bestScore: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 0
  },
  registrationDate: {
    type: DataTypes.DATE,
    allowNull: false,
    defaultValue: DataTypes.NOW
  },
  lastLogin: {
    type: DataTypes.DATE,
    allowNull: false,
    defaultValue: DataTypes.NOW
  }
});

// D√©finir le mod√®le Season sans aucune r√©f√©rence √† User
const Season = sequelize.define('Season', {
  id: {
    type: DataTypes.INTEGER,
    autoIncrement: true,
    primaryKey: true
  },
  seasonNumber: {
    type: DataTypes.INTEGER,
    allowNull: false
  },
  endDate: {
    type: DataTypes.DATE,
    allowNull: false
  },
  prizeMoney: {
    type: DataTypes.FLOAT,
    allowNull: false,
    defaultValue: 0
  },
  isActive: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: true
  },
  isClosed: {
    type: DataTypes.BOOLEAN,
    allowNull: false,
    defaultValue: false
  },
  winnerId: {
    type: DataTypes.STRING,
    allowNull: true
  }
});

// D√©finir le mod√®le SeasonScore
const SeasonScore = sequelize.define('SeasonScore', {
  id: {
    type: DataTypes.INTEGER,
    autoIncrement: true,
    primaryKey: true
  },
  userId: {
    type: DataTypes.STRING,
    allowNull: false
  },
  seasonId: {
    type: DataTypes.INTEGER,
    allowNull: false
  },
  score: {
    type: DataTypes.INTEGER,
    allowNull: false,
    defaultValue: 0
  }
});

// Synchroniser les mod√®les avec la base de donn√©es
(async () => {
  try {
    // Synchroniser les mod√®les sans supprimer les tables existantes
    // Utiliser { alter: true } pour mettre √† jour la structure si n√©cessaire, mais sans supprimer les donn√©es
    await sequelize.sync({ alter: true });
    console.log('üîÑ Database synchronized successfully');
  } catch (err) {
    console.error('Erreur lors de la synchronisation de la base de donn√©es:', err);
  }
})();

// Initialiser la base de donn√©es
(async () => {
  try {
    // V√©rifier si la table users existe et contient des donn√©es
    try {
      const count = await User.count();
      console.log(`üìä ${count} users found in the database`);
      
      // Si la table est vide, migrer les donn√©es existantes si n√©cessaire
      if (count === 0) {
        console.log('La table users est vide, tentative de migration des donn√©es...');
        await migrateExistingData();
      }
    } catch (error) {
      console.error('Erreur lors de la v√©rification des donn√©es:', error);
    }
  } catch (error) {
    console.error('Erreur lors de l\'initialisation de la base de donn√©es:', error);
  }
})();

// Fonction pour migrer les donn√©es existantes du fichier JSON vers la base de donn√©es
async function migrateExistingData() {
  try {
    const dataDir = path.join(__dirname, 'data');
    const usersFile = path.join(dataDir, 'users.json');
    
    if (fs.existsSync(usersFile)) {
      const usersData = fs.readFileSync(usersFile, 'utf8');
      const users = JSON.parse(usersData);
      
      console.log(`Migration de ${users.length} utilisateurs vers la base de donn√©es...`);
      
      for (const user of users) {
        // V√©rifier si l'utilisateur existe d√©j√†
        const [existingUser] = await User.findOrCreate({
          where: {
            [Op.or]: [
              { gameId: user.gameId },
              { telegramId: user.telegramId !== "N/A" ? user.telegramId : null }
            ]
          },
          defaults: {
            gameId: user.gameId,
            gameUsername: user.gameUsername,
            telegramId: user.telegramId !== "N/A" ? user.telegramId : null,
            telegramUsername: user.telegramUsername !== "N/A" ? user.telegramUsername : null,
            paypalEmail: user.paypalEmail || "",
            bestScore: parseInt(user.bestScore) || 0,
            registrationDate: user.registrationDate || new Date().toISOString().split('T')[0],
            lastLogin: user.lastLogin || new Date().toISOString().split('T')[0]
          }
        });
      }
      
      console.log('Migration termin√©e avec succ√®s');
      
      // Cr√©er une sauvegarde du fichier JSON
      fs.copyFileSync(usersFile, path.join(dataDir, 'users_backup.json'));
    } else {
      console.log('Aucun fichier de donn√©es utilisateurs trouv√© pour la migration');
    }
  } catch (error) {
    console.error('Erreur lors de la migration des donn√©es:', error);
  }
}

const app = express();
const port = process.env.PORT || 3000;
const botToken = process.env.BOT_TOKEN;
const webAppUrl = process.env.WEBAPP_URL;

// Middleware pour parser le JSON
app.use(express.json());

// Servir les fichiers statiques
app.use(express.static(path.join(__dirname, 'public')));

// Initialiser le bot Telegram
const bot = new Telegraf(botToken);

// Commande /start
bot.start((ctx) => {
  ctx.reply('Bienvenue sur TiDash Game!', {
    reply_markup: {
      inline_keyboard: [
        [{ text: 'Jouer', web_app: { url: webAppUrl } }]
      ]
    }
  });
});

// Lancer le bot
bot.launch().then(() => {
  console.log('Bot Telegram d√©marr√©');
}).catch((err) => {
  console.error('Erreur lors du d√©marrage du bot:', err);
});

// Route pour r√©cup√©rer une saison sp√©cifique
app.get('/api/seasons/:id', async (req, res) => {
  const { id } = req.params;
  try {
    const season = await Season.findByPk(id);
    if (!season) {
      return res.status(404).json({ error: 'Saison non trouv√©e' });
    }
    res.json(season);
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration de la saison:', error);
    res.status(500).json({ error: 'Erreur lors de la r√©cup√©ration de la saison' });
  }
});

// Route pour le panneau d'administration
app.get('/admin754774', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'admin754774', 'index.html'));
});

// API pour r√©cup√©rer tous les utilisateurs (avec pagination et recherche)
app.get('/api/users', async (req, res) => {
  try {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const offset = (page - 1) * limit;
    const search = req.query.search || '';
    
    // Construire la condition de recherche
    const whereCondition = search
      ? {
          [Op.or]: [
            { gameId: { [Op.like]: `%${search}%` } },
            { gameUsername: { [Op.like]: `%${search}%` } },
            { telegramId: { [Op.like]: `%${search}%` } },
            { telegramUsername: { [Op.like]: `%${search}%` } },
            { paypalEmail: { [Op.like]: `%${search}%` } }
          ]
        }
      : {};
    
    // R√©cup√©rer les utilisateurs avec pagination
    const { count, rows } = await User.findAndCountAll({
      where: whereCondition,
      order: [['bestScore', 'DESC']],
      limit,
      offset
    });
    
    res.json({
      total: count,
      totalPages: Math.ceil(count / limit),
      currentPage: page,
      users: rows
    });
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des utilisateurs:', error);
    res.status(500).json({ error: 'Erreur lors de la r√©cup√©ration des utilisateurs' });
  }
});

// Route pour r√©cup√©rer un utilisateur sp√©cifique
app.get('/api/users/:id', async (req, res) => {
  try {
    const { id } = req.params;
    
    console.log(`Tentative de r√©cup√©ration de l'utilisateur avec ID: ${id}`);
    
    // R√©cup√©rer l'utilisateur par gameId (qui est la cl√© primaire)
    const user = await User.findOne({ where: { gameId: id } });
    
    if (!user) {
      console.log(`Utilisateur avec ID ${id} non trouv√©`);
      return res.status(404).json({ error: 'Utilisateur non trouv√©' });
    }
    
    console.log(`Utilisateur trouv√©: ${user.gameUsername} (${user.gameId})`);
    
    res.json(user);
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration de l\'utilisateur:', error);
    res.status(500).json({ error: 'Erreur lors de la r√©cup√©ration de l\'utilisateur', details: error.message });
  }
});

// Route pour supprimer un utilisateur
app.delete('/api/users/:id', async (req, res) => {
  try {
    const { id } = req.params;
    
    console.log(`üóëÔ∏è Attempting to delete user with ID: ${id}`);
    
    // D√©sactiver temporairement les contraintes de cl√© √©trang√®re
    await sequelize.query('PRAGMA foreign_keys = OFF;');
    
    try {
      // Supprimer directement l'utilisateur avec une requ√™te SQL brute
      await sequelize.query('DELETE FROM "Users" WHERE "gameId" = ?', {
        replacements: [id]
      });
      
      // Supprimer les scores de saison associ√©s
      await sequelize.query('DELETE FROM "SeasonScores" WHERE "userId" = ?', {
        replacements: [id]
      });
      
      // Mettre √† jour les r√©f√©rences dans Seasons
      await sequelize.query('UPDATE "Seasons" SET "winnerId" = NULL WHERE "winnerId" = ?', {
        replacements: [id]
      });
      
      // Mettre √† jour les r√©f√©rences dans Seasons_backup si elle existe
      try {
        await sequelize.query('UPDATE "Seasons_backup" SET "winnerId" = NULL WHERE "winnerId" = ?', {
          replacements: [id]
        });
      } catch (backupError) {
        // Ignorer les erreurs si la table n'existe pas
        console.log(`‚ÑπÔ∏è Note: ${backupError.message}`);
      }
      
      console.log(`‚úÖ User ${id} deleted successfully`);
      
      // R√©activer les contraintes de cl√© √©trang√®re
      await sequelize.query('PRAGMA foreign_keys = ON;');
      
      res.status(200).json({ message: 'User deleted successfully' });
    } catch (innerError) {
      // R√©activer les contraintes de cl√© √©trang√®re m√™me en cas d'erreur
      await sequelize.query('PRAGMA foreign_keys = ON;');
      throw innerError;
    }
  } catch (error) {
    console.error('‚ùå Error deleting user:', error);
    res.status(500).json({ 
      error: 'Error deleting user', 
      details: error.message,
      stack: error.stack
    });
  }
});

// API pour enregistrer un nouvel utilisateur ou mettre √† jour un utilisateur existant
app.post('/api/users', async (req, res) => {
  try {
    const userData = req.body;
    console.log('üìù User data received:', userData);

    // R√©cup√©rer la saison active
    const activeSeason = await Season.findOne({ where: { isActive: true } });
    const currentScore = userData.bestScore ? parseInt(userData.bestScore) : 0;
    const currentSeasonScore = userData.seasonScore ? parseInt(userData.seasonScore) : 0;

    console.log(`üîç Processing user ${userData.gameId} - Global score: ${currentScore}, Season score: ${currentSeasonScore}`);

    // V√©rifier si l'utilisateur existe d√©j√†
    let user = null;
    if (userData.gameId) {
      user = await User.findOne({ where: { gameId: userData.gameId } });
    } else if (userData.telegramId) {
      user = await User.findOne({ where: { telegramId: userData.telegramId } });
    }

    if (user) {
      // Mettre √† jour l'utilisateur existant
      const updateData = {};
      
      // Mettre √† jour les champs si fournis
      if (userData.gameUsername) updateData.gameUsername = userData.gameUsername;
      if (userData.telegramId) updateData.telegramId = userData.telegramId;
      if (userData.telegramUsername) updateData.telegramUsername = userData.telegramUsername;
      if (userData.paypalEmail) updateData.paypalEmail = userData.paypalEmail;
      
      // Mettre √† jour le meilleur score global si le nouveau score est plus √©lev√©
      if (currentScore > user.bestScore) {
        updateData.bestScore = currentScore;
        console.log(`üìà Global score updated for ${user.gameId}: ${currentScore}`);
      }
      
      // Mettre √† jour la date de derni√®re connexion
      updateData.lastLogin = new Date();
      
      await user.update(updateData);
      
      // Mettre √† jour le score de la saison si une saison active existe
      if (activeSeason) {
        // R√©cup√©rer ou cr√©er un score de saison pour cet utilisateur
        let seasonScore = await SeasonScore.findOne({
          where: { userId: user.gameId, seasonId: activeSeason.id }
        });
        
        if (!seasonScore) {
          // Si l'utilisateur n'a pas encore de score pour cette saison, en cr√©er un
          seasonScore = await SeasonScore.create({
            userId: user.gameId,
            seasonId: activeSeason.id,
            score: currentSeasonScore
          });
          console.log(`‚ú® New season score created for ${user.gameId}: ${currentSeasonScore}`);
        } else if (currentSeasonScore > seasonScore.score) {
          // Mettre √† jour uniquement si le nouveau score est meilleur
          await seasonScore.update({ score: currentSeasonScore });
          console.log(`üìà Season score updated for ${user.gameId}: ${currentSeasonScore}`);
        } else {
          console.log(`‚ÑπÔ∏è No season score update needed for ${user.gameId}: current ${currentSeasonScore} <= existing ${seasonScore.score}`);
        }
      }
      
      res.status(200).json({ message: 'User updated successfully', user });
    } else {
      // Cr√©er un nouvel utilisateur
      if (!userData.gameId || !userData.gameUsername) {
        return res.status(400).json({ error: 'gameId and gameUsername are required to create a new user' });
      }
      
      const newUser = await User.create({
        gameId: userData.gameId,
        gameUsername: userData.gameUsername,
        telegramId: userData.telegramId || null,
        telegramUsername: userData.telegramUsername || null,
        paypalEmail: userData.paypalEmail || null,
        bestScore: currentScore,
        registrationDate: userData.registrationDate || new Date(),
        lastLogin: new Date()
      });
      
      console.log(`‚ú® New user created: ${newUser.gameId}`);
      
      // Si une saison active existe, cr√©er un score de saison pour le nouvel utilisateur
      if (activeSeason) {
        await SeasonScore.create({
          userId: newUser.gameId,
          seasonId: activeSeason.id,
          score: currentSeasonScore
        });
        console.log(`‚ú® Season score created for new user ${newUser.gameId}: ${currentSeasonScore}`);
      }
      
      res.status(201).json({ message: 'New user created successfully', user: newUser });
    }
  } catch (error) {
    console.error('‚ùå Error saving user:', error);
    res.status(500).json({ error: 'Error saving user', details: error.message });
  }
});

// API pour r√©cup√©rer les saisons
app.get('/api/seasons', async (req, res) => {
  try {
    const seasons = await Season.findAll({
      order: [['seasonNumber', 'DESC']]
    });
    
    console.log('Saisons r√©cup√©r√©es:', seasons.map(s => s.toJSON()));
    res.json(seasons);
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des saisons:', error);
    res.status(500).json({ error: 'Erreur lors de la r√©cup√©ration des saisons' });
  }
});

// API pour cr√©er une nouvelle saison
app.post('/api/seasons', async (req, res) => {
  const { seasonNumber, endDate, prizeMoney } = req.body;
  
  console.log('Cr√©ation de saison - Donn√©es re√ßues:', req.body);
  
  try {
    // Validation des donn√©es
    if (!seasonNumber || !endDate || prizeMoney === undefined) {
      console.error('Donn√©es de saison invalides:', req.body);
      return res.status(400).json({ error: 'Tous les champs sont requis (seasonNumber, endDate, prizeMoney)' });
    }
    
    // Utiliser une transaction pour s'assurer que toutes les op√©rations sont atomiques
    const transaction = await sequelize.transaction();
    
    try {
      // 1. D√©sactiver toutes les saisons actives
      await Season.update({ isActive: false }, { 
        where: { isActive: true },
        transaction
      });
      
      // 2. Cr√©er une nouvelle saison
      const newSeason = await Season.create({
        seasonNumber: parseInt(seasonNumber),
        endDate: new Date(endDate),
        prizeMoney: parseFloat(prizeMoney),
        isActive: true,
        isClosed: false,
        winnerId: null
      }, { transaction });
      
      // 3. IMPORTANT: Supprimer TOUS les scores de saison existants pour la nouvelle saison
      // Cela garantit qu'il n'y a pas de scores r√©siduels d'une saison pr√©c√©dente
      await sequelize.query('DELETE FROM "SeasonScores" WHERE "seasonId" = ?', {
        replacements: [newSeason.id],
        transaction
      });
      
      // 4. R√©cup√©rer tous les utilisateurs
      const users = await User.findAll({
        attributes: ['gameId'],
        transaction
      });
      
      // 5. Cr√©er des scores de saison initialis√©s √† 0 pour tous les utilisateurs existants
      if (users.length > 0) {
        const seasonScores = users.map(user => ({
          userId: user.gameId,
          seasonId: newSeason.id,
          score: 0
        }));
        
        await SeasonScore.bulkCreate(seasonScores, { transaction });
        console.log(`‚úÖ ${seasonScores.length} season scores initialized to 0 for new season ${newSeason.seasonNumber} üèÜ`);
      }
      
      // Valider la transaction
      await transaction.commit();
      
      console.log('üéÆ New season created:', newSeason.toJSON());
      res.status(201).json(newSeason);
    } catch (innerError) {
      // Annuler la transaction en cas d'erreur
      await transaction.rollback();
      throw innerError;
    }
  } catch (error) {
    console.error('Erreur lors de la cr√©ation de la saison:', error);
    res.status(500).json({ error: 'Erreur lors de la cr√©ation de la saison', details: error.message });
  }
});

// API pour mettre √† jour une saison
app.put('/api/seasons/:id', async (req, res) => {
  const { id } = req.params;
  const { seasonNumber, endDate, prizeMoney } = req.body;
  
  console.log('Mise √† jour de saison - Donn√©es re√ßues:', req.body);
  
  try {
    // Validation des donn√©es
    if (!seasonNumber || !endDate || prizeMoney === undefined) {
      console.error('Donn√©es de saison invalides:', req.body);
      return res.status(400).json({ error: 'Tous les champs sont requis (seasonNumber, endDate, prizeMoney)' });
    }
    
    const season = await Season.findByPk(id);
    if (!season) {
      return res.status(404).json({ error: 'Saison non trouv√©e' });
    }
    
    await season.update({
      seasonNumber: parseInt(seasonNumber),
      endDate: new Date(endDate),
      prizeMoney: parseFloat(prizeMoney)
    });
    
    console.log('Saison mise √† jour:', season.toJSON());
    res.json(season);
  } catch (error) {
    console.error('Erreur lors de la mise √† jour de la saison:', error);
    res.status(500).json({ error: 'Erreur lors de la mise √† jour de la saison', details: error.message });
  }
});

// API pour cl√¥turer une saison
app.post('/api/seasons/:id/close', async (req, res) => {
  const { id } = req.params;
  
  try {
    const season = await Season.findByPk(id);
    if (!season) {
      return res.status(404).json({ error: 'Saison non trouv√©e' });
    }
    
    if (season.isClosed) {
      return res.status(400).json({ error: 'Cette saison est d√©j√† cl√¥tur√©e' });
    }
    
    // R√©cup√©rer le gagnant de la saison (meilleur score)
    const topScore = await SeasonScore.findOne({
      where: { seasonId: id },
      order: [['score', 'DESC']]
    });
    
    let winnerId = null;
    let winner = null;
    let winnerSeasonScore = null;
    
    if (topScore) {
      winnerId = topScore.userId;
      winner = await User.findByPk(winnerId);
      winnerSeasonScore = topScore.score; // Stocker le score de saison du gagnant
    }
    
    // Mettre √† jour la saison
    await season.update({
      isClosed: true,
      isActive: false,
      winnerId
    });
    
    console.log('Saison cl√¥tur√©e avec succ√®s:', season.toJSON());
    
    res.json({ 
      message: 'Saison cl√¥tur√©e avec succ√®s',
      season,
      winner,
      winnerSeasonScore // Inclure le score de saison du gagnant dans la r√©ponse
    });
  } catch (error) {
    console.error('Erreur lors de la cl√¥ture de la saison:', error);
    res.status(500).json({ error: 'Erreur lors de la cl√¥ture de la saison' });
  }
});

// Route pour r√©cup√©rer le classement d'une saison
app.get('/api/seasons/:id/ranking', async (req, res) => {
  const { id } = req.params;
  const limit = req.query.limit ? parseInt(req.query.limit) : 100;
  
  try {
    const seasonScores = await SeasonScore.findAll({
      where: { seasonId: id },
      order: [['score', 'DESC']],
      limit
    });
    
    // R√©cup√©rer les informations utilisateur pour chaque score
    const ranking = [];
    for (const score of seasonScores) {
      const user = await User.findByPk(score.userId);
      if (user) {
        ranking.push({
          userId: score.userId,
          username: user.gameUsername,
          score: score.score // Utiliser le score sp√©cifique √† la saison, pas le score global
        });
      }
    }
    
    res.json(ranking);
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration du classement de la saison:', error);
    res.status(500).json({ error: 'Erreur lors de la r√©cup√©ration du classement de la saison' });
  }
});

// Route pour r√©cup√©rer le classement global
app.get('/api/global-ranking', async (req, res) => {
  const limit = req.query.limit ? parseInt(req.query.limit) : 100;
  
  try {
    const users = await User.findAll({
      order: [['bestScore', 'DESC']],
      limit
    });
    
    const ranking = users.map(user => ({
      userId: user.gameId,
      username: user.gameUsername,
      score: user.bestScore
    }));
    
    res.json(ranking);
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration du classement global:', error);
    res.status(500).json({ error: 'Erreur lors de la r√©cup√©ration du classement global' });
  }
});

// Route pour r√©cup√©rer la saison active
app.get('/api/active-season', async (req, res) => {
  try {
    const activeSeason = await Season.findOne({
      where: { isActive: true }
    });
    
    if (!activeSeason) {
      return res.status(404).json({ error: 'Aucune saison active' });
    }
    
    res.json(activeSeason);
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration de la saison active:', error);
    res.status(500).json({ error: 'Erreur lors de la r√©cup√©ration de la saison active' });
  }
});

// Route alternative pour r√©cup√©rer la saison active (pour compatibilit√©)
app.get('/api/seasons/active', async (req, res) => {
  try {
    const activeSeason = await Season.findOne({
      where: { isActive: true }
    });
    
    if (!activeSeason) {
      return res.status(404).json({ error: 'No active season found' });
    }
    
    console.log('üèÜ Active season requested:', activeSeason.toJSON());
    res.json(activeSeason);
  } catch (error) {
    console.error('‚ùå Error retrieving active season:', error);
    res.status(500).json({ error: 'Error retrieving active season' });
  }
});

// API pour supprimer une saison
app.delete('/api/seasons/:id', async (req, res) => {
  const { id } = req.params;
  
  try {
    // V√©rifier si la saison existe
    const season = await Season.findByPk(id);
    if (!season) {
      return res.status(404).json({ error: 'Season not found' });
    }
    
    // D√©sactiver temporairement les contraintes de cl√© √©trang√®re
    await sequelize.query('PRAGMA foreign_keys = OFF;');
    
    try {
      // Supprimer les scores de saison associ√©s
      await sequelize.query('DELETE FROM "SeasonScores" WHERE "seasonId" = ?', {
        replacements: [id]
      });
      
      // Supprimer la saison
      await sequelize.query('DELETE FROM "Seasons" WHERE "id" = ?', {
        replacements: [id]
      });
      
      // R√©activer les contraintes de cl√© √©trang√®re
      await sequelize.query('PRAGMA foreign_keys = ON;');
      
      console.log(`üóëÔ∏è Season ${id} deleted successfully`);
      res.status(200).json({ message: 'Season deleted successfully' });
    } catch (innerError) {
      // R√©activer les contraintes de cl√© √©trang√®re m√™me en cas d'erreur
      await sequelize.query('PRAGMA foreign_keys = ON;');
      throw innerError;
    }
  } catch (error) {
    console.error('‚ùå Error deleting season:', error);
    res.status(500).json({ 
      error: 'Error deleting season', 
      details: error.message,
      stack: error.stack
    });
  }
});

// Route pour r√©cup√©rer le score de saison d'un utilisateur sp√©cifique
app.get('/api/seasons/:seasonId/scores/:userId', async (req, res) => {
  try {
    const { seasonId, userId } = req.params;
    
    // V√©rifier si la saison existe
    const season = await Season.findByPk(seasonId);
    if (!season) {
      return res.status(404).json({ error: 'Season not found' });
    }
    
    // R√©cup√©rer le score de saison de l'utilisateur
    const seasonScore = await SeasonScore.findOne({
      where: { 
        seasonId: seasonId,
        userId: userId
      }
    });
    
    if (!seasonScore) {
      // Si aucun score n'est trouv√©, renvoyer 0
      return res.json({ score: 0 });
    }
    
    console.log(`üìä Retrieved season score for user ${userId} in season ${seasonId}: ${seasonScore.score}`);
    res.json({ score: seasonScore.score });
  } catch (error) {
    console.error('‚ùå Error retrieving season score:', error);
    res.status(500).json({ 
      error: 'Error retrieving season score', 
      details: error.message
    });
  }
});

// D√©marrer le serveur
app.listen(port, '0.0.0.0', () => {
  console.log(`Serveur d√©marr√© sur le port ${port}`);
});

// Graceful shutdown handling
process.once('SIGINT', () => {
  bot.stop('SIGINT');
  process.exit(0);
});
process.once('SIGTERM', () => {
  bot.stop('SIGTERM');
  process.exit(0);
});

console.log('TiDash Game Bot is running...');
